/*
--> Gestione del cerchio di raggi raycast 

Ho dei raggi raycast a 360 gradi 

questi raggi devono essere categorizzati in base al nome dell'angolo a cui corrispondono 

la dir_princ del mio robot di default la indichiamo corrispondente con il raggio posto a a 90 gradi ma è un qualcosa che varierà 

quindi mi troverò in una situazione in cui ho 

il parametro dist_raycast che è la lunghezza dei raggi del raycast 

il paramestro soglia è il valore al di sotto del quale i raggi del raycast diventano sotto soglia e quindi entrano nella logica di previsione della collisione 

lista_raggi_sopra_soglia[] e una lista_raggi_sotto_soglia[] 


int fase di avvio sarò quindi nella situazione lista_raggi_sopra_soglia[1.....360] e dir_princ = 90 

al momento in cui il mio robot incontra un ostacolo nella dir_princ mi troverò nella situazione 

lista_raggi_sopra_soglia[0...80,100....360] e lista_raggi_sotto_soglia[[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]] 

il che significa che i raggi sotto soglia sono quelli che vanno da 81 a 99 e quindi ho un ostacolo che prende un ampiezza di 20 gradi 

a questo punto interviene l'algoritmo di decisione della direzione che fa la seguente cosa 

prende la lista_raggi_sotto_soglia[] e mi crea due sotto array dir_sx=[] e dir_dx=[] gli array si compongono così a pratire dalla dir_princ 
prendo il suo opposto nella criconferenza in questo caso 270 e su dir_sx metto da 100 che è il primo raggio non compromesso a sx fino a 270 e poi su dir_dx
metto da 80 fino a 270 a ritroso che è la direzione opposta a dir_sx quindi in questo momento avrò:

dir_sx[100,101,....270] e dir_dx[80,79,78,77,...,0,359,358,357,....,270]
dir_princ = 90 e dir_opp = 270 

ora dopo che ho composto questi vedo quale dei due array è più corto se è uguale scelgo a random e nel caso in cui adesempio dir_dx sia più corto cambio 
dir_princ nel valore pari all'elemento di valore grad_sterzata dell' array quindi se grad_sterzata è 20 allora la mia dir_princ adesso sarà 60 perchè
nel caso di dir_dx è un array che va a ritroso se sceglievo dir_sx sarebbe stato 120 conseguentemente aggiorno anche dir_opp nel caso di 60 a 240 nel caso di 120 a 300
comunque di +180 rispetto alla dir_princ. 

Questo è il caso in cui ho un solo ostacolo ora descriviamo nel caso di ostacoli multipli 

Mettiamo caso di avere due ostacoli e dir_princ = 90 gli ostacoli si trovano il primo tra 100 e 140 e il secondo tra 40 e 0
avremmo una situazione del genere 
dir_princ = 90 
dir_opp = 270
lista_raggi_sopra_soglia[41...99,141...360] e lista_raggi_sotto_soglia[[0,...,40],[100,...,140]] 
da notare che i sotto soglia sono raggruppatti per adiacenza in sotto array nel caso di tre ostacoli sarebbe stato lista_raggi_sotto_soglia[[0,...,40],[100,...,140],[235]]  
ma continueremo l'esempio con due 

detto ciò cosa si fa per prima cosa vedo se tra i sotto array sotto soglia ho una differenza pari a grad_sterzata quindi in questo caso se grad_sterzata è 20 
da 40 a 100 ci rientra allora cambio dir_princ nel punto medio tra 40 e 100 quindi 70 e dir_opp in 250

se siamo nel caso in cui tra questi due non ho una differenza bastevole per esempio se ho ostacoli uno tra 60 e 80 e uno tra 100 e 120 cosa faccio
allora scriviamo il nostro array di lista_raggi_sotto_soglia in questo caso questo sarà così composto lista_raggi_sotto_soglia[[60,...,80],[100,...,120]]
e di conseguenza quello di sopra soglia 
allora che faccio visto che la verifica su grad_sterzata non va a buon fine 
compongo nuovamente gli array di dir_sx e dir_dx ma come questa volta, prendo il primo elemento del primo ostacolo e l'ultimo del secondo quindi in questo caso 
60 e 120 da questi punti compongo dir_sx e dir_dx che saranno così fatti 
dir_sx[120,101,....270] e dir_dx[60,79,78,77,...,0,359,358,357,....,270] scelgo quello più corto e opero con grad_sterzata come sopra enunciato 
e aggiorno i parametri 

Nel caso sfortunato di una lunghezza di lista_raggi_sotto_soglia maggiore di 2 faccio una ricerca dentro a lista_raggi_sopra_soglia, che ovviamente si decrementa
dei raggi sotto soglia, faccio la ricerca di un numero di raggi consequenziali pari a grad_sterzata e se per esempio ho 4 ostacoli e 
ho libero solo da 300 a 320 imposto dir_princ a 310 e proseguo 

dopo che il robot ha compiuto il giro su se stesso e si è piazzato lungo la nuova direzione resetto di nuovo dir_princ a 90 in maniera da proseguire reiteratamente 

*/


----------------VERSIONE CON ORECCHIE---------------------------------------

using UnityEngine;

public class RaycastManager : MonoBehaviour
{
    public float raycastLength = 3.7f; // Maximum raycast distance
    public float threshold = 3.7f; // Distance threshold
    public float rayHeight = 1.5f; // Raycast height relative to the robot
    public int numberOfRays = 360; // Number of rays simulating the arc
    public int additionalRays = 20; // Additional rays for slots
    public LayerMask layerMask; // Layer to ignore (robot's Layer)

    private RaycastHit hitInfo;
    public bool sensorsEnabled = true;

    void Update()
    {
        if (sensorsEnabled)
        {
            GetObstacleDirection();
        }
    }

    public string GetObstacleDirection()
    {
        int leftCount = 0, rightCount = 0;
        int leftSlotCount = 0, rightSlotCount = 0;

        Vector3 origin = transform.position + Vector3.up * rayHeight; // Ray origin point

        bool frontObstacleDetected = false; // Flag to check if a front obstacle was detected

        // Check front rays
        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-45f, 45f, i / (float)(numberOfRays - 1)); // Angle distributed between -45° and +45°
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
            {
                if (hitInfo.distance < threshold)
                {
                    frontObstacleDetected = true; // Obstacle found on the front

                    if (angle < 0)
                        leftCount++; // Obstacle on the left
                    else
                        rightCount++; // Obstacle on the right
                }
            }
        }

        // Evaluate side slots only if a front obstacle is detected
        if (frontObstacleDetected)
        {
            for (int i = 0; i < additionalRays; i++)
            {
                float angle = Mathf.Lerp(-90f, -70f, i / (float)(additionalRays - 1)); // Further left slot angles
                Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

                if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
                {
                    if (hitInfo.distance < threshold)
                    {
                        leftSlotCount++; // Obstacle in the left slot
                    }
                }
            }

            for (int i = 0; i < additionalRays; i++)
            {
                float angle = Mathf.Lerp(70f, 90f, i / (float)(additionalRays - 1)); // Further right slot angles
                Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

                if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
                {
                    if (hitInfo.distance < threshold)
                    {
                        rightSlotCount++; // Obstacle in the right slot
                    }
                }
            }
        }

        if (!frontObstacleDetected && leftSlotCount == 0 && rightSlotCount == 0)
        {
            return "Nessun ostacolo";
        }

        if (leftCount + leftSlotCount > rightCount + rightSlotCount)
            return "Sinistra";
        else if (rightCount + rightSlotCount > leftCount + leftSlotCount)
            return "Destra";
        else
            return Random.Range(0, 2) == 0 ? "Sinistra" : "Destra";
    }


    private void OnDrawGizmos()
    {
        if (!sensorsEnabled)
        {
            return; // Do not draw anything if sensors are disabled
        }

        Vector3 origin = transform.position + Vector3.up * rayHeight; // Ray origin point
        float halfAngle = 45f;

        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-halfAngle, halfAngle, i / (float)(numberOfRays - 1)); // Angle from -45° to +45°
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
            {
                if (hitInfo.distance < threshold)
                {
                    Gizmos.color = Color.red; // Below threshold, show ray in red
                }
                else
                {
                    Gizmos.color = Color.green; // Above threshold, show ray in green
                }
            }
            else
            {
                Gizmos.color = Color.green; // No obstacle detected, color green
            }

            Gizmos.DrawRay(origin, direction * raycastLength);
        }

        DrawSlotGizmos(origin, -90f, -70f, additionalRays); // Further left slot rays
        DrawSlotGizmos(origin, 70f, 90f, additionalRays); // Further right slot rays
    }

    private void DrawSlotGizmos(Vector3 origin, float minAngle, float maxAngle, int slotCount)
    {
        for (int i = 0; i < slotCount; i++)
        {
            float angle = Mathf.Lerp(minAngle, maxAngle, i / (float)(slotCount - 1)); // Slot angles
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
            {
                if (hitInfo.distance < threshold)
                {
                    Gizmos.color = Color.red; // Below threshold, show ray in red
                }
                else
                    {
                    Gizmos.color = Color.green; // Above threshold, show ray in green
                }
            } 
            else
            {
                Gizmos.color = Color.green; // No obstacle detected, color green
            }

            Gizmos.DrawRay(origin, direction * raycastLength);
        }
    }
}


---------------VERSIONE DOPPIO CON 360--------------------------------

using UnityEngine;

public class RaycastManager : MonoBehaviour
{
    public float raycastLength = 3.7f; // Distanza massima del raycast
    public float threshold = 3.7f; // Soglia di rilevamento ostacoli
    public float rayHeight = 1.5f; // Altezza del raycast relativa al robot
    public int numberOfRays = 360; // Numero di raggi per l'arco
    public int additionalRays = 20; // Raggi aggiuntivi per slot
    public LayerMask layerMask; // Layer da ignorare

    // Nuove proprietà per il laser esteso
    public float extendedRaycastLength = 20.0f; // Distanza del laser esteso
    public float extendedThreshold = 5.0f; // Soglia per il laser esteso
    public float extendedWeight = 0.1f; // Peso del laser esteso

    private RaycastHit hitInfo;
    public bool sensorsEnabled = true;

    void Update()
    {
        if (sensorsEnabled)
        {
            GetObstacleDirection();
        }
    }

    public string GetObstacleDirection()
    {
        int leftCount = 0, rightCount = 0;
        int extendedLeftCount = 0, extendedRightCount = 0;

        Vector3 origin = transform.position + Vector3.up * rayHeight; // Punto di origine del raycast

        // Raggi principali
        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-45f, 45f, i / (float)(numberOfRays - 1)); // Angoli tra -45° e +45°
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
            {
                if (hitInfo.distance < threshold)
                {
                    if (angle < 0)
                        leftCount++; // Ostacolo a sinistra
                    else
                        rightCount++; // Ostacolo a destra
                }
            }
        }

        // Laser esteso
        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-180f, 180f, i / (float)(numberOfRays - 1)); // 360° completi
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, extendedRaycastLength))
            {
                if (hitInfo.distance < extendedThreshold)
                {
                    if (angle < 0)
                        extendedLeftCount++; // Ostacolo grande a sinistra
                    else
                        extendedRightCount++; // Ostacolo grande a destra
                }
            }
        }

        // Somma ponderata
        float weightedLeft = leftCount + extendedLeftCount * extendedWeight;
        float weightedRight = rightCount + extendedRightCount * extendedWeight;

        if (weightedLeft > weightedRight)
            return "Sinistra";
        else if (weightedRight > weightedLeft)
            return "Destra";
        else
            return Random.Range(0, 2) == 0 ? "Sinistra" : "Destra";
    }

    private void OnDrawGizmos()
    {
        if (!sensorsEnabled)
        {
            return; // Non disegnare nulla se i sensori sono disabilitati
        }

        Vector3 origin = transform.position + Vector3.up * rayHeight; // Punto di origine del raycast

        // Raggi principali
        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-45f, 45f, i / (float)(numberOfRays - 1)); // Angoli da -45° a +45°
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, raycastLength))
            {
                Gizmos.color = hitInfo.distance < threshold ? Color.red : Color.green; // Raggio rosso sotto la soglia
            }
            else
            {
                Gizmos.color = Color.green; // Nessun ostacolo rilevato
            }

            Gizmos.DrawRay(origin, direction * raycastLength);
        }

        // Raggi laser estesi
        for (int i = 0; i < numberOfRays; i++)
        {
            float angle = Mathf.Lerp(-180f, 180f, i / (float)(numberOfRays - 1)); // 360° completi
            Vector3 direction = Quaternion.Euler(0, angle, 0) * transform.forward;

            if (Physics.SphereCast(origin, 0.2f, direction, out hitInfo, extendedRaycastLength))
            {
                Gizmos.color = hitInfo.distance < extendedThreshold ? Color.yellow : Color.blue; // Raggio giallo sotto la soglia
            }
            else
            {
                Gizmos.color = Color.blue; // Nessun ostacolo rilevato
            }

            Gizmos.DrawRay(origin, direction * extendedRaycastLength);
        }
    }
}
